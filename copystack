#!/usr/bin/env python

import json
import argparse
import keystone_common
import neutron_common
import nova_common
import glance_common
import cinder_common
from novaclient import exceptions
from auth_stack2 import AuthStack


# auth = AuthStack()
# parser = argparse.ArgumentParser(description='Welcome to Copystack, your OpenStack migration helper')
# print "From:", auth.from_auth_ip, " Username:", auth.from_username, " Project:", auth.from_tenant_name
# print "To:  ", auth.to_auth_ip, " Username:", auth.to_username, " Project:", auth.to_tenant_name


def add_cinder_command_options(subparsers):
    cinder_parser = subparsers.add_parser('cinder', help='Run cinder reports and custom volume actions.')

    cinder_parser.add_argument("-s", "--report", action='store_true', dest='report', help='Print FROM volumes with details')
    cinder_parser.add_argument("-S", "--Report", action='store_true', dest='Report', help='Print TO volumes with details')
    cinder_parser.add_argument("-t", "--types", action='store_true', dest='types', help='Print available volume types')
    cinder_parser.add_argument("-b", "--backups", action='store_true', dest='backups', help='Print volume backups')
    cinder_parser.add_argument("-p", "--pools", action='store_true', dest='pools', help='Print volume pools')
    cinder_parser.add_argument("-m", "--manage", nargs=1, metavar='host name', dest='manage', help='Print FROM manageable volumes. '
                                                                                 'Please provide host name, similar to sample-aio-liberty-2@lvm#LVM_iSCSI')
    cinder_parser.add_argument("-M", "--Manage", nargs=1, metavar='host name', dest='Manage', help='Print TO manageable volumes. '
                                                                                 'Please provide host name, similar to sample-aio-liberty-2@lvm#LVM_iSCSI')
    cinder_parser.add_argument("-u", "--uuid", dest='solidfire',
                               nargs=1, metavar=('cinder_uuid'),
                               help='Print SolidFire ID given Cinder volume ID')
    cinder_parser.add_argument("-d", "--manage-ssd", dest='managessd', nargs=3, metavar=('host', 'volume_name', 'solidfire_id'),
                               help='Manage unbootable SolidFire volume on the "TO" destination. '
                                    'Input: host, volume_name, solidfire_id, for example:'
                                    './copystack cinder -d sample-aio-liberty-2@lvm#LVM_iSCSI custom_volume_name 9999999'
                               )
    cinder_parser.add_argument("-r", "--retype", dest='retypevolumes', nargs=2, metavar=('UUID_file', 'volume_type'),
                               help='Retype volumes on the "TO" destination. '
                                'Input: file with volume UUIDs and new volume type that will apply to all provided volumes'
                               'For example, ./volume_ids lvm'
                               )


def cinder_actions(args):
    if args.report:
        print "\n--------------- From Volumes: ------------------------"
        volumes = cinder_common.print_detail_volumes('from')
    if args.Report:
        print "\n--------------- To Volumes: ------------------------"
        volumes = cinder_common.print_detail_volumes('to')
    if args.types:
        print "\n--------------- From Volume Types: ------------------------"
        cinder_common.print_volume_types('from')
        print "\n--------------- To Volume Types: ------------------------"
        cinder_common.print_volume_types('to')
    if args.backups:
        print "\n--------------- From Volume Backups: ------------------------"
        cinder_common.print_volume_backups('from')
        print "\n--------------- To Volume Backups: ------------------------"
        cinder_common.print_volume_backups('to')
    if args.pools:
        print "\n--------------- From Volume Pools: ------------------------"
        cinder_common.print_cinder_pools('from')
        print "\n--------------- To Volume Pools: ------------------------"
        cinder_common.print_cinder_pools('to')
    if args.Manage:
        if len(args.Manage) == 1:
            print "\n--------------- To Manageable Volumes: ------------------------"
            cinder_common.print_manageable_volumes('to', host=args.Manage[0])
        else:
            print "Please provide host name, similar to sample-aio-liberty-2@lvm#LVM_iSCSI"
    if args.manage:
        if args:
            print "\n--------------- From Volume Pools: ------------------------"
            if len(args.manage) == 1:
                print args.manage[0]
            cinder_common.print_manageable_volumes('from', host=args.manage[0])
        else:
            print "Please provide host name, similar to sample-aio-liberty-2@lvm#LVM_iSCSI"
    if args.solidfire:
        if len(args.solidfire) == 1:
            cinder_common.print_solid_fire_id(args.solidfire[0])
    if args.managessd:
        if len(args.managessd) == 3:
            cinder_common.manage_ssd(args.managessd[0], args.managessd[1], args.managessd[2])
    if args.retypevolumes:
        if len(args.retypevolumes) == 2:
            cinder_common.retype_volumes_by_volume_ids('to', args.retypevolumes[0], args.retypevolumes[1])


def add_keystone_command_options(subparsers):
    keystone_parser = subparsers.add_parser('keystone', help='Run keystone reports and custom keystone actions.')

    keystone_parser.add_argument("-r", "--fromroles", action='store_true', dest='fromroles', help='Print FROM roles')
    keystone_parser.add_argument("-R", "--toroles", action='store_true', dest='toroles', help='Print TO roles')
    keystone_parser.add_argument("-u", "--fromusers", action='store_true', dest='fromusers', help='Print FROM users')
    keystone_parser.add_argument("-U", "--tousers", action='store_true', dest='tousers', help='Print TO users')
    keystone_parser.add_argument("-p", "--fromprojects", action='store_true', dest='fromprojects',
                      help='Print FROM projects (or tenants)')
    keystone_parser.add_argument("-P", "--toprojects", action='store_true', dest='toprojects',
                      help='Print TO projects (or tenants)')
    keystone_parser.add_argument("-x", "--from_projectusers", action='store_true', dest='from_projectusers',
                                 help='Print FROM users in each project (or tenants)')
    keystone_parser.add_argument("-X", "--to_projectusers", action='store_true', dest='to_projectusers',
                                 help='Print TO users in each project (or tenants)')
    keystone_parser.add_argument("-d", "--from_domaintusers", action='store_true', dest='from_domaintusers',
                                 help='Print FROM users in current domain')
    keystone_parser.add_argument("-D", "--to_domainusers", action='store_true', dest='to_domainusers',
                                 help='Print TO users in current domain')
    keystone_parser.add_argument("-m", "--showmatrix", dest='showmatrix', nargs=1, metavar='users',
                                 help='Print roles users project matrix. Pass either file or "all" as an argument')
    keystone_parser.add_argument("-j", "--createprojects", action='store_true', dest='createprojects',
                                 help='Copy projects FROM to TO for current domains.')
    keystone_parser.add_argument("-c", "--createusers", dest='createusers', nargs='+', metavar=('users'),
                                 help='Copy users FROM to TO for current domains. Pass either file or "all" as an argument. '
                                      'Password is optional second parameter. '
                               'If password is not included, users created without a password.')


def keystone_actions(args):

    if args.fromroles:
        print "\n--------------- From Roles: ------------------------"
        keystone_common.print_roles('from')
    if args.toroles:
        print "\n--------------- To Roles: ------------------------"
        keystone_common.print_roles('to')
    if args.fromusers:
        print "\n--------------- From Users: ------------------------"
        keystone_common.print_user_names('from')
    if args.tousers:
        print "\n--------------- To Users: ------------------------"
        keystone_common.print_user_names('to')
    if args.fromprojects:
        keystone_common.print_projects('from')
    if args.toprojects:
        keystone_common.print_projects('to')
    if args.from_projectusers:
        print "\n--------------- From Project Users: ------------------------"
        keystone_common.print_users_per_project('from')
    if args.to_projectusers:
        print "\n--------------- To Project Users: ------------------------"
        keystone_common.print_users_per_project('to')
    if args.from_domaintusers:
        print "\n--------------- From Domain Users: ------------------------"
        keystone_common.print_users_per_domain('from')
    if args.to_domainusers:
        print "\n--------------- To Domain Users: ------------------------"
        keystone_common.print_users_per_domain('to')
    if args.showmatrix:
        if len(args.showmatrix) == 1:
            if args.showmatrix[0] == 'all':
                keystone_common.build_matrix()
            else:
                keystone_common.build_matrix(args.showmatrix[0])
        else:
            print "Pass either file name or 'all' as an argument"
    if args.createprojects:
        keystone_common.compare_and_create_projects()
    if args.createusers:
        if len(args.createusers) == 2:
            if args.createusers[0] == 'all':
                keystone_common.compare_and_create_users_by_domain(password=args.createusers[0])
            else:
                keystone_common.compare_and_create_users_by_domain(password=args.createusers[1], user_name_file=args.createusers[0])
        elif len(args.createusers) == 1:
            if args.createusers[0] == 'all':
                keystone_common.compare_and_create_users_by_domain()
            else:
                keystone_common.compare_and_create_users_by_domain(password=args.createusers[0])
        else:
            print "bad argument list for user create."


def add_nova_command_options(subparsers):
    nova_parser = subparsers.add_parser('nova', help='Run nova reports and custom nova actions.')
    nova_parser.add_argument("-s", "--from_sec", action='store_true', dest='from_sec', help='Print FROM security groups')
    nova_parser.add_argument("-S", "--to_sec", action='store_true', dest='to_sec', help='Print TO security groups')
    nova_parser.add_argument("-x", "--copysec", action='store_true', dest='copysec', help='Copy security groups FROM->TO. '
                                    'Will also update DEFAULT group rules. Other duplucate groups will be ignored.')
    nova_parser.add_argument("-k", "--publickeys", action='store_true', dest='publickeys',
                             help='Copy public keys FROM->TO. '
                                  'Will also update DEFAULT group rules. Other duplucate groups will be ignored.')
    nova_parser.add_argument("-f", "--from_flavor", action='store_true', dest='from_flavor', help='Print FROM flavors')
    nova_parser.add_argument("-F", "--to_flavor", action='store_true', dest='to_flavor', help='Print TO flavors')
    nova_parser.add_argument("-X", "--copy_flavors", action='store_true', dest='copy_flavors', help='Copy flavors from->to. Run as admin.')
    nova_parser.add_argument("-v", "--from_vms", action='store_true', dest='from_vms', help='Print FROM vms')
    nova_parser.add_argument("-V", "--to_vms", action='store_true', dest='to_vms', help='Print TO vms')
    nova_parser.add_argument("-p", "--power_on", dest='power_on', nargs=1, metavar='UUID_file',
                                help='Power On VMs for each UUID provided in a file, for example, ./id_file')
    nova_parser.add_argument("-u", "--from_vms_no_vol", action='store_true', dest='from_vms_no_vol', help='Print FROM vms that have NO volumes attached.')
    nova_parser.add_argument("-U", "--to_vms_no_vol", action='store_true', dest='to_vms_no_vol', help='Print TO vms that have NO volumes attached.')
    nova_parser.add_argument("-b", "--from_vms_no_boot_vol", action='store_true', dest='from_vms_no_boot_vol',
                             help='Print FROM vms that have no BOOTABLE volumes attached.')
    nova_parser.add_argument("-B", "--to_vms_no_boot_vol", action='store_true', dest='to_vms_no_boot_vol',
                             help='Print TO vms that have no BOOTABLE volumes attached.')
    nova_parser.add_argument("-n", "--from_vms_with_interfaces", dest='from_vms_with_interfaces', nargs=1, metavar='UUID_file',
                             help='Print FROM VMs and matching interfaces for each UUID provided in a file, for example, ./id_file')
    nova_parser.add_argument("-N", "--to_vms_with_interfaces", dest='to_vms_with_interfaces', nargs=1,
                             metavar='UUID_file',
                             help='Print TO VMs and matching interfaces for each UUID provided in a file, for example, ./id_file')


def nova_actions(args):
    if args.from_sec:
        print "\n--------------- From Security Groups: ------------------------"
        nova_common.print_security_groups('from')
    if args.to_sec:
        print "\n--------------- To Security Groups: ------------------------"
        nova_common.print_security_groups('to')
    if args.copysec:
        print "**** Create new groups ****"
        nova_common.compare_and_create_security_groups()
        print "**** Updating exsisting group rules: ****"
        # nova_common.update_default_group_rules()
        nova_common.update_all_group_rules()
    if args.publickeys:
        print "**** Copy public keys ****"
        nova_common.compare_and_create_keypairs()
    if args.from_flavor:
        print "\n--------------- From Flavors: ------------------------"
        nova_common.print_flavor_list('from')
    if args.copy_flavors:
        nova_common.compare_and_create_flavors()
    if args.to_flavor:
        print "\n--------------- To Flavors: ------------------------"
        nova_common.print_flavor_list('to')
    if args.from_vms:
        print "\n--------------- From VMs: ------------------------"
        vms = nova_common.print_vm_list_ids('from')
    if args.to_vms:
        print "\n--------------- To VMs: ------------------------"
        vms = nova_common.print_vm_list_ids('to')
    if args.power_on:
        if len(args.power_on) == 1:
            print "\n--------------- Powering On From VMs: ------------------------"
            nova_common.power_on_vms('from', id_file=args.power_on[0])
    if args.from_vms_no_vol:
        print "\n--------------- From VMs: ------------------------"
        vms = nova_common.print_vm_list_ids_without_volumes('from')
    if args.to_vms_no_vol:
        print "\n--------------- To VMs: ------------------------"
        vms = nova_common.print_vm_list_ids_without_volumes('to')
    if args.from_vms_no_boot_vol:
        print "\n--------------- From VMs: ------------------------"
        vms = nova_common.print_vm_list_ids_without_bootable_volumes('from')
    if args.to_vms_no_boot_vol:
        print "\n--------------- To VMs: ------------------------"
        vms = nova_common.print_vm_list_ids_without_bootable_volumes('to')
    if args.from_vms_with_interfaces:
        if len(args.from_vms_with_interfaces) == 1:
            nova_common.print_interfaces_for_vms('from', id_file=args.from_vms_with_interfaces[0])
    if args.to_vms_with_interfaces:
        if len(args.to_vms_with_interfaces) == 1:
            nova_common.print_interfaces_for_vms('to', id_file=args.to_vms_with_interfaces[0])


def add_glance_command_options(subparsers):
    glance_parser = subparsers.add_parser('glance', help='Run glance reports.')
    glance_parser.add_argument("-i", "--from_images", action='store_true', dest='from_images', help='Print FROM images')
    glance_parser.add_argument("-I", "--to_images", action='store_true', dest='to_images', help='Print TO images')


def glance_actions(args):
    if args.from_images:
        print "\n--------------- From Images: ------------------------"
        glance_common.print_images('from')
    if args.to_images:
        print "\n--------------- To Images: ------------------------"
        glance_common.print_images('to')


def add_neutron_command_options(subparsers):
    neutron_parser = subparsers.add_parser('neutron', help='Run neutron reports and custom neutron actions.')
    neutron_parser.add_argument("-n", "--nets", action='store_true', dest='nets', help='Print FROM networks')
    neutron_parser.add_argument("-N", "--Nets", action='store_true', dest='Nets', help='Print TO networks')
    neutron_parser.add_argument("-r", "--routers", action='store_true', dest='routers', help='Print FROM routers')
    neutron_parser.add_argument("-R", "--Routers", action='store_true', dest='Routers', help='Print TO routers')
    neutron_parser.add_argument("-p", "--ports", action='store_true', dest='ports', help='Print FROM ports')
    neutron_parser.add_argument("-P", "--Ports", action='store_true', dest='Ports', help='Print TO ports')
    neutron_parser.add_argument("-c", "--common", action='store_true', dest='common', help='IPs in both environments')
    neutron_parser.add_argument("-d", "--diff", action='store_true', dest='diff', help='IPs missing from "TO" environment')
    neutron_parser.add_argument("-C", "--smacs", action='store_true', dest='smacs', help='Macs in both environments' )
    neutron_parser.add_argument("-D", "--dmacs", action='store_true', dest='dmacs', help='Macs missing from "TO" environment' )
    neutron_parser.add_argument("-i", "--interfaces", action='store_true', dest='interfaces', help='Add missing interfaces.'
                                ' Run this command as Admin. Add missing interfaces between routers and networks and '
                               'additional ports.')


def neutron_actions(args):
    if args.nets:
        print "\n--------------- From Networks (with subnets): ---------------------"
        neutron_common.print_network_list('from')
    if args.Nets:
        print "\n--------------- To Networks (with subnets): ------------------------"
        neutron_common.print_network_list('to')
    if args.routers:
        print "\n--------------- From Routers: ---------------------"
        neutron_common.print_routers('from')
    if args.Routers:
        print "\n--------------- To Routers: ---------------------"
        neutron_common.print_routers('to')
    if args.ports:
        print "\n--------------- From Ports: ---------------------"
        neutron_common.print_ports('from')
    if args.Ports:
        print "\n--------------- TO Ports: ---------------------"
        neutron_common.print_ports('to')
    if args.common:
        print "\n--------------- IPs created in both environments: ---------------------"
        print "IP                   Port Type"
        neutron_common.print_common_ips()
    if args.diff:
        print "\n--------------- IPs missing from 'TO' environment: ---------------------"
        print "IP                   Port Type"
        neutron_common.print_diff_ips()
    if args.dmacs:
        print "\n--------------- Print differences in macs: ---------------------"
        print "Mac Addresss         IP                   Port Type"
        neutron_common.print_diff_macs()
    if args.smacs:
        print "\n--------------- Print same macs: ---------------------"
        print "Mac Addresss         IP                   Port Type"
        neutron_common.print_same_macs()
    if args.interfaces:
        print "\n--------------- Adding missing ports: ---------------------"
        neutron_common.compare_and_create_ports()


def add_migrate_command_options(subparsers):
    migrate_parser = subparsers.add_parser('migrate', help='Migration using glance images and cinder volumes.')

    migrate_parser.add_argument("-0", "--shutdown", dest='shutdown', nargs=1, metavar='UUID_file',
                                help='Shutdown VMs for each UUID provided in a file, for example, ./id_file')
    migrate_parser.add_argument("-1", "--createsnapshotvm", dest='createsnapshotvm', nargs=1, metavar='UUID_file',
                                help='Create VM glance images as well as snapshots from VMs Cinder volumes for each UUID provided in a file, '
                                     'for example, ./id_file. ')
    migrate_parser.add_argument("-2", "--createsvolumefromsnapshot", dest='createsvolumefromsnapshot', nargs=1,
                                metavar='UUID_file',
                                help='Create volumes from glance images and volume snapshots based on associated VM for each VM UUID provided in a file, '
                                     'for example, ./id_file. ')
    migrate_parser.add_argument("-3", "--managevolumes", dest='managevolumes',
                                nargs=3, metavar=('UUID_file', 'SSD_host', 'HDD_host'),
                                help='Manage all volumes by VM UUID '
                                     'for each UUID provided in a file, for example, ./id_file.'
                                     'Please provide 2 hosts (SSD and HDD based) to be used for cinder volumes. '
                                     'These hosts will be used for all VMs in the id_file. For example, '
                                     ' ./id_file <SDD host> <HDD host> '
                                     ' ./id_file sample-aio-liberty-2@lvm#SolidFire_iSCSI sample-aio-liberty-2@Ceph#LVM_iSCSI')
    migrate_parser.add_argument("-4", "--converttoimages", nargs=1, metavar=('UUID_file'),
                                help='Convert volumes back to VM images for each UUID provided in '
                                     'a file, for example, ./id_file')
    # migrate_parser.add_argument("-5", "--retypevolumes", nargs=2, metavar=('UUID_file', 'type'),
    #                             help='Retype all volumes to a give type by associated VM UUID for each UUID provided in '
    #                                  'a file, for example, ./id_file lvm')
    migrate_parser.add_argument("-5", "--boot",
                                nargs=1, metavar='UUID_file',
                                dest='boot',
                                help='Boot migrated VMs from volumes for each VM UUID provided in a file, for example, ./id_file. '
                                     'with prior IPs attached. Example command: '
                                     ' ./copystack migrate -6 ./id_file')
    migrate_parser.add_argument("-6", "--adddvolumestovms", dest='adddvolumestovms',
                                nargs=1, metavar='UUID_file',
                                help='Attach additional volumes to migrated VMs for each UUID provided in the original '
                                     'migration file, for example, ./id_file.')
    migrate_parser.add_argument("-7", "--securitygroups", dest='securitygroups', nargs=1, metavar='UUID_file',
                                help='Attach security groups to migrated VMs for each UUID provided in the original '
                                     'migration file, for example, ./id_file. ')


def migrate_actions(args):
    if args.shutdown:
        if len(args.shutdown) == 1:
            nova_common.power_off_vms('from', id_file=args.shutdown[0])
        else:
            print "Please provide file with VM UUIDs to be shutdown, for example, ./id_file"
    if args.createsnapshotvm:
        if args.createsnapshotvm:
            #todo: move this and add logic on checking for boot from volume vs boot from image
            nova_common.prepare_migrate_vms_from_image_snapshot(id_file=args.createsnapshotvm[0])
            nova_common.create_image_from_vm('from', id_file=args.createsnapshotvm[0])
        else:
            print "Please provide file with VM UUIDs to be migrated, for example, ./id_file"
    if args.createsvolumefromsnapshot:
        if len(args.createsvolumefromsnapshot) == 1:
            nova_common.make_volumes_from_snapshots("from", id_file=args.createsvolumefromsnapshot[0])
            cinder_common.convert_image_to_volume_by_vm_ids('from', id_file=args.createsvolumefromsnapshot[0])
        else:
            print "Please provide file with VM UUIDs to be migrated, for example, ./id_file"
    if args.managevolumes:
        if len(args.managevolumes) == 3:
            nova_common.manage_volumes_based_on_vms(args.managevolumes[0], args.managevolumes[1], args.managevolumes[2])
    if args.converttoimages:
        if len(args.converttoimages) == 1:
            cinder_common.convert_volumes_to_vm_images_by_vm_ids('to', args.converttoimages[0])
    # if args.retypevolumes:
    #     if len(args.retypevolumes) == 2:
    #         nova_common.retype_volumes_based_on_vms(args.retypevolumes[0], args.retypevolumes[1])
    if args.boot:
        if len(args.boot) == 1:
            nova_common.migrate_vms_from_image(id_file=args.boot[0])
    if args.adddvolumestovms:
        if len(args.adddvolumestovms) == 1:
            nova_common.attach_volumes(id_file=args.adddvolumestovms[0])
        else:
            print "Please provide file with VM ids, for example, ./id_file"
    if args.securitygroups:
        if len(args.securitygroups) == 1:
            nova_common.attach_security_groups(id_file=args.securitygroups[0])
        else:
            print "Please provide file with VM UUIDs to be shutdown, for example, ./id_file"


def add_move_command_options(subparsers):
    migrate_parser = subparsers.add_parser('move', help='Migrate using volume move')
    migrate_parser.add_argument("-0", "--shutdown", dest='shutdown', nargs=1, metavar='UUID_file',
                      help='Shutdown VMs for each UUID provided in a file, for example, ./id_file')
    migrate_parser.add_argument("-1", "--createsnapshotvm", dest='createsnapshotvm', nargs=1, metavar='UUID_file',
                      help='Create snapshots from VMs Cinder volumes for each UUID provided in a file, '
                           'for example, ./id_file. ')
    migrate_parser.add_argument("-2", "--createsvolumefromsnapshot", dest='createsvolumefromsnapshot', nargs=1, metavar='UUID_file',
                      help='Create volumes from snapshots based on associated VM for each VM UUID provided in a file, '
                           'for example, ./id_file. ')
    migrate_parser.add_argument("-3", "--managevolumes", dest='managevolumes',
                      nargs=3, metavar=('UUID_file', 'SSD_host', 'HDD_host'),
                      help='Manage all volumes by VM UUID ' 
                           'for each UUID provided in a file, for example, ./id_file.'
                           'Please provide 2 hosts (SSD and HDD based) to be used for cinder volumes. '
                           'These hosts will be used for all VMs in the id_file. For example, '
                           ' ./id_file <SDD host> <HDD host> '
                           ' ./id_file sample-aio-liberty-2@lvm#SolidFire_iSCSI sample-aio-liberty-2@Ceph#LVM_iSCSI')
    migrate_parser.add_argument("-4", "--retypevolumes", nargs=2, metavar=('UUID_file', 'type'),
                                help='Retype all volumes to a give type by associated VM UUID for each UUID provided in '
                                     'a file, for example, ./id_file lvm')
    migrate_parser.add_argument("-5", "--boot",
                      nargs='+',
                      dest='boot',
                      help='Boot migrated VMs from volumes for each VM UUID provided in a file, for example, ./id_file. '
                           'on a custom network. Floating IPs will not be created. Provide network name or ID,'
                           ' key-name and optional user data file, for example: '
                           ' Sample: -5 ./id_file demo-net key-name user-data.txt')
    migrate_parser.add_argument("-6", "--adddvolumestovms",  dest='adddvolumestovms',
                      nargs=1, metavar='UUID_file',
                      help='Attach additional volumes to migrated VMs for each UUID provided in the original '
                           'migration file, for example, ./id_file.')
    migrate_parser.add_argument("-7", "--securitygroups", dest='securitygroups', nargs=1, metavar='UUID_file',
                      help='Attach security groups to migrated VMs for each UUID provided in the original '
                           'migration file, for example, ./id_file. ')


def move_actions(args):
    if args.shutdown:
        if len(args.shutdown) == 1:
            nova_common.power_off_vms('from', id_file=args.shutdown[0])
        else:
            print "Please provide file with VM UUIDs to be shutdown, for example, ./id_file"
    if args.createsnapshotvm:
        if args.createsnapshotvm:
            nova_common.prepare_migrate_vms_from_image_snapshot(id_file=args.createsnapshotvm[0])
        else:
            print "Please provide file with VM UUIDs to be migrated, for example, ./id_file"
    if args.createsvolumefromsnapshot:
        if len(args.createsvolumefromsnapshot) == 1:
            nova_common.make_volumes_from_snapshots("from", id_file=args.createsvolumefromsnapshot[0])
        else:
            print "Please provide file with VM UUIDs to be migrated, for example, ./id_file"
    if args.managevolumes:
        if len(args.managevolumes) == 3:
            nova_common.manage_volumes_based_on_vms(args.managevolumes[0], args.managevolumes[1], args.managevolumes[2])
    if args.retypevolumes:
        if len(args.retypevolumes) == 2:
            nova_common.retype_volumes_based_on_vms(args.retypevolumes[0], args.retypevolumes[1])
    if args.boot:
        if len(args.boot) >=2:

            user_data = "default"
            if len(args.boot) == 4:
                user_data = args.boot[3]
                try:
                    user_data = open(args.boot[3])
                except IOError as e:
                    raise exceptions.CommandError(_("Can't open '%(user_data)s': "
                                                    "%(exc)s") %
                                                  {'user_data': args.user_data,
                                                   'exc': e})
            nova_common.boot_from_volume_vms_from_image_with_network_mapping(id_file=args.boot[0], custom_network=args.boot[1], key=args.boot[2], user_data=user_data)
    if args.adddvolumestovms:
        if len(args.adddvolumestovms) == 1:
            nova_common.attach_volumes(id_file=args.adddvolumestovms[0])
        else:
            print "Please provide file with VM ids, for example, ./id_file"
    if args.securitygroups:
        if len(args.securitygroups) == 1:
            nova_common.attach_security_groups(id_file=args.securitygroups[0])
        else:
            print "Please provide file with VM UUIDs to be shutdown, for example, ./id_file"


def add_copy_command_options(subparsers):
    migrate_parser = subparsers.add_parser('copy', help='Migrate by converting VM snapshots to volumes and then using volume move')
    migrate_parser.add_argument("-0", "--shutdown", dest='shutdown', nargs=1, metavar='UUID_file',
                      help='Shutdown VMs for each UUID provided in a file, for example, ./id_file')
    migrate_parser.add_argument("-1", "--createsnapshotvm", dest='createsnapshotvm', nargs=1, metavar='UUID_file',
                      help='Create VM glance images as well as snapshots from VMs Cinder volumes for each UUID provided in a file, '
                           'for example, ./id_file. ')
    migrate_parser.add_argument("-2", "--createsvolumefromsnapshot", dest='createsvolumefromsnapshot', nargs=1, metavar='UUID_file',
                      help='Create volumes from glance images and volume snapshots based on associated VM for each VM UUID provided in a file, '
                           'for example, ./id_file. ')
    migrate_parser.add_argument("-3", "--managevolumes", dest='managevolumes',
                      nargs=3, metavar=('UUID_file', 'SSD_host', 'HDD_host'),
                      help='Manage all volumes by VM UUID ' 
                           'for each UUID provided in a file, for example, ./id_file.'
                           'Please provide 2 hosts (SSD and HDD based) to be used for cinder volumes. '
                           'These hosts will be used for all VMs in the id_file. For example, '
                           ' ./id_file <SDD host> <HDD host> '
                           ' ./id_file sample-aio-liberty-2@lvm#SolidFire_iSCSI sample-aio-liberty-2@Ceph#LVM_iSCSI')
    migrate_parser.add_argument("-4", "--converttoimages", nargs=1, metavar=('UUID_file'),
                                help='Convert volumes back to VM images for each UUID provided in '
                                     'a file, for example, ./id_file')
    migrate_parser.add_argument("-5", "--retypevolumes", nargs=2, metavar=('UUID_file', 'type'),
                                help='Retype all volumes to a give type by associated VM UUID for each UUID provided in '
                                     'a file, for example, ./id_file lvm')
    migrate_parser.add_argument("-6", "--boot",
                      nargs='+',
                      dest='boot',
                      help='Boot migrated VMs from IMAGES for each VM UUID provided in a file, for example, ./id_file. '
                           'on a custom network. Floating IPs will not be created. Provide network name or ID,'
                           ' key-name and optional user data file, for example: '
                           ' Sample: -6 ./id_file demo-net key-name user-data.txt')
    migrate_parser.add_argument("-7", "--bootalt",
                                nargs='+',
                                dest='bootalt',
                                help='Skip steps 4 and 6 for boot from volume. Boot volume will be mounted as /dev/vda, '
                                     'which could cause issues with secondary volumes.'
                                     'Boot migrated VMs from VOLUME for each VM UUID provided in a file, for example, ./id_file. '
                                     'on a custom network. Floating IPs will not be created. Provide network name or ID,'
                                     ' key-name and optional user data file, for example: '
                                     ' Sample: -7 ./id_file demo-net key-name user-data.txt')
    migrate_parser.add_argument("-8", "--adddvolumestovms",  dest='adddvolumestovms',
                      nargs=1, metavar='UUID_file',
                      help='Attach additional volumes to migrated VMs for each UUID provided in the original '
                           'migration file, for example, ./id_file.')
    migrate_parser.add_argument("-9", "--securitygroups", dest='securitygroups', nargs=1, metavar='UUID_file',
                      help='Attach security groups to migrated VMs for each UUID provided in the original '
                           'migration file, for example, ./id_file. ')


def copy_actions(args):
    if args.shutdown:
        if len(args.shutdown) == 1:
            nova_common.power_off_vms('from', id_file=args.shutdown[0])
        else:
            print "Please provide file with VM UUIDs to be shutdown, for example, ./id_file"
    if args.createsnapshotvm:
        if args.createsnapshotvm:
            #todo: move this and add logic on checking for boot from volume vs boot from image
            nova_common.prepare_migrate_vms_from_image_snapshot(id_file=args.createsnapshotvm[0])
            nova_common.create_image_from_vm('from', id_file=args.createsnapshotvm[0])
        else:
            print "Please provide file with VM UUIDs to be migrated, for example, ./id_file"
    if args.createsvolumefromsnapshot:
        if len(args.createsvolumefromsnapshot) == 1:
            nova_common.make_volumes_from_snapshots("from", id_file=args.createsvolumefromsnapshot[0])
            cinder_common.convert_image_to_volume_by_vm_ids('from', id_file=args.createsvolumefromsnapshot[0])
        else:
            print "Please provide file with VM UUIDs to be migrated, for example, ./id_file"
    if args.managevolumes:
        if len(args.managevolumes) == 3:
            nova_common.manage_volumes_based_on_vms(args.managevolumes[0], args.managevolumes[1], args.managevolumes[2])
    if args.converttoimages:
        if len(args.converttoimages) == 1:
            cinder_common.convert_volumes_to_vm_images_by_vm_ids('to', args.converttoimages[0])
    if args.retypevolumes:
        if len(args.retypevolumes) == 2:
            nova_common.retype_volumes_based_on_vms(args.retypevolumes[0], args.retypevolumes[1])
    if args.boot:
        if len(args.boot) >=2:
            user_data = "default"
            if len(args.boot) == 4:
                user_data = args.boot[3]
                try:
                    user_data = open(args.boot[3])
                except IOError as e:
                    raise exceptions.CommandError(_("Can't open '%(user_data)s': "
                                                    "%(exc)s") %
                                                  {'user_data': args.user_data,
                                                   'exc': e})
            nova_common.boot_from_vms_from_image_with_network_mapping(id_file=args.boot[0], custom_network=args.boot[1], key=args.boot[2], user_data=user_data)
    if args.bootalt:
        if len(args.bootalt) >=2:
            user_data = "default"
            if len(args.bootalt) == 4:
                user_data = args.bootalt[3]
                try:
                    user_data = open(args.bootalt[3])
                except IOError as e:
                    raise exceptions.CommandError(_("Can't open '%(user_data)s': "
                                                    "%(exc)s") %
                                                  {'user_data': args.user_data,
                                                   'exc': e})
            nova_common.boot_from_volume_vms_with_network_mapping(id_file=args.bootalt[0], custom_network=args.bootalt[1], key=args.bootalt[2], user_data=user_data)

    if args.adddvolumestovms:
        if len(args.adddvolumestovms) == 1:
            nova_common.attach_volumes(id_file=args.adddvolumestovms[0])
        else:
            print "Please provide file with VM ids, for example, ./id_file"
    if args.securitygroups:
        if len(args.securitygroups) == 1:
            nova_common.attach_security_groups(id_file=args.securitygroups[0])
        else:
            print "Please provide file with VM UUIDs to be shutdown, for example, ./id_file"


def main():
    auth = AuthStack()
    print "From:", auth.from_auth_ip, " Username:", auth.from_username, " Project:", auth.from_tenant_name
    print "To:  ", auth.to_auth_ip, " Username:", auth.to_username, " Project:", auth.to_tenant_name

    parser = argparse.ArgumentParser(description="Welcome to Copystack, your OpenStack migration helper!")
    subparsers = parser.add_subparsers(help='Program mode', dest='mode')
    # subparsers.add_parser('cinder')
    # subparsers.add_parser('glance')
    # subparsers.add_parser('keystone')
    # subparsers.add_parser('neutron')
    # subparsers.add_parser('nova')
    # subparsers.add_parser('migrate')
    # subparsers.add_parser('move')
    # subparsers.add_parser('copy')

    add_cinder_command_options(subparsers)
    add_glance_command_options(subparsers)
    add_keystone_command_options(subparsers)
    add_neutron_command_options(subparsers)
    add_nova_command_options(subparsers)
    add_migrate_command_options(subparsers)
    add_move_command_options(subparsers)
    add_copy_command_options(subparsers)

    args = parser.parse_args()
    # print args
    if args.mode == 'cinder':
        cinder_actions(args)
    elif args.mode == 'glance':
        glance_actions(args)
    elif args.mode == 'keystone':
        keystone_actions(args)
    elif args.mode == 'nova':
        nova_actions(args)
    elif args.mode == 'neutron':
        neutron_actions(args)
    elif args.mode == 'migrate':
        migrate_actions(args)
    elif args.mode == 'move':
        move_actions(args)
    elif args.mode == 'copy':
        copy_actions(args)
    else:
        parser.print_usage()


if __name__== "__main__":
  main()


